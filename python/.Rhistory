is_eligible = self.eligibility(sim)
if is_eligible is not None and len(is_eligible): # Only worry if non-None/nonzero length
if isinstance(is_eligible, ss.BoolArr):
is_eligible = is_eligible.uids
if not isinstance(is_eligible, ss.uids):
errormsg = f'Eligibility function must return BoolArr or UIDs, not {type(is_eligible)} {is_eligible}'
raise TypeError(errormsg)
else:
is_eligible = sim.people.auids # Everyone
return is_eligible
class measlesIBaseVaccination(measlesIntervention):
"""
Base vaccination class for determining who will receive a vaccine.
"""
def __init__(self, product=None, prob=None, label=None, **kwargs):
super().__init__(**kwargs)
self.prob = sc.promotetoarray(prob)
self.label = label
self._parse_product(product)
self.vaccinated = ss.BoolArr('vaccinated')
self.n_doses = ss.FloatArr('doses', default=0)
self.ti_vaccinated = ss.FloatArr('ti_vaccinated')
self.age_at_vaccination_mcv1 = ss.FloatArr('age_at_vaccination_mcv1')  # New array to store age at MCV1
self.age_at_vaccination_mcv2 = ss.FloatArr('age_at_vaccination_mcv2')  # New array to store age at MCV2
self.coverage_dist = ss.bernoulli(p=0)  # Placeholder
return
def apply(self, sim, dose="mcv1"):
"""
Deliver the vaccination based on the dose type ('mcv1' or 'mcv2').
"""
accept_uids = np.array([])
if sim.ti in self.timepoints:
ti = sc.findinds(self.timepoints, sim.ti)[0]
prob = self.prob[ti]  # Get the proportion of people who will be vaccinated this timestep
is_eligible = self.check_eligibility(sim)  # Check eligibility
self.coverage_dist.set(p=prob)
accept_uids = self.coverage_dist.filter(is_eligible)
if dose == "mcv1":
# First dose (MCV1): Eligible age between 9 and 12 months, no previous dose
accept_uids = sim.people.auids[(sim.people.age >= 9/12) & (sim.people.age <= 12/12) & (self.n_doses == 0)]
if len(accept_uids):
self.product.administer(sim.people, accept_uids)
# Update people's state and vaccination date for MCV1
self.vaccinated[accept_uids] = True
self.ti_vaccinated[accept_uids] = sim.ti
self.n_doses[accept_uids] += 1
# Store the age at the time of MCV1 vaccination
self.age_at_vaccination_mcv1[accept_uids] = sim.people.age[accept_uids]
elif dose == "mcv2":
# Second dose (MCV2): Eligible age between 18 and 24 months, only 1 previous dose
accept_uids = sim.people.auids[(sim.people.age >= 18/12) & (sim.people.age <= 24/12) & (self.n_doses == 1)]
if len(accept_uids):
self.product.administer(sim.people, accept_uids)
# Update people's state and vaccination date for MCV2
self.vaccinated[accept_uids] = True
self.ti_vaccinated[accept_uids] = sim.ti
self.n_doses[accept_uids] += 1
# Store the age at the time of MCV2 vaccination
self.age_at_vaccination_mcv2[accept_uids] = sim.people.age[accept_uids]
return accept_uids
class measles_routine_vx(measlesIBaseVaccination, ss.RoutineDelivery):
"""
Routine vaccination - an instance of base vaccination combined with routine delivery.
See base classes for a description of input arguments.
"""
def __init__(self, product=None, prob=None, eligibility=None, dose = None,
start_year=None, end_year=None, years=None, **kwargs):
measlesIBaseVaccination.__init__(self, product=product, dose = dose, eligibility=eligibility, **kwargs)
ss.RoutineDelivery.__init__(self, prob=prob, start_year=start_year, end_year=end_year, years=years)
return
def init_pre(self, sim):
RoutineDelivery.init_pre(self, sim)  # Initialize this first, as it ensures that prob is interpolated properly
measlesIBaseVaccination.init_pre(self, sim)  # Initialize this next
my_intervention1 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.95,           # 20% coverage
product=mcv1,        # Use the MyVaccine product
dose = "mcv1"
)
mcv1 = measles_vaccine(efficacy=0.80)
mcv2 = measles_vaccine(efficacy=0.95)
my_intervention1 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.95,           # 20% coverage
product=mcv1,        # Use the MyVaccine product
dose = "mcv1"
)
my_intervention2 = ss.routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.80,           # 20% coverage
product=mcv2,   # Use the MyVaccine product
dose = "mcv2"
)
my_intervention2 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.80,           # 20% coverage
product=mcv2,   # Use the MyVaccine product
dose = "mcv2"
)
pars = dict(
n_agents = 25_000,     # Number of agents to simulate
birth_rate = 27.58,    # parameters for monthly: birth rate 2022 is 27.58
death_rate = 7.8,        # parameters for monthly: death rate 2022 is 7.8
networks = ss.RandomNet(pars={'n_contacts': 10})
)
ppl = ss.People(
n_agents = 25_000,     # Number of agents to simulate
age_data = pop_age
)
intv = [my_intervention1, my_intervention2]
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
# Create the intervention
my_intervention1 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.95,           # 20% coverage
product=mcv1,        # Use the MyVaccine product
dose = "mcv1",
name="mcv1"
)
my_intervention2 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.80,           # 20% coverage
product=mcv2,   # Use the MyVaccine product
dose = "mcv2",
name="mcv2"
)
intv = [my_intervention1, my_intervention2]
# Pars
pars = dict(
n_agents = 25_000,     # Number of agents to simulate
birth_rate = 27.58,    # parameters for monthly: birth rate 2022 is 27.58
death_rate = 7.8,        # parameters for monthly: death rate 2022 is 7.8
networks = ss.RandomNet(pars={'n_contacts': 10})
)
ppl = ss.People(
n_agents = 25_000,     # Number of agents to simulate
age_data = pop_age
)
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
intv
mcv1 = measles_vaccine(efficacy=0.80, name="mcv1")
mcv2 = measles_vaccine(efficacy=0.95, name="mcv2")
my_intervention1 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.95,           # 20% coverage
product=mcv1,        # Use the MyVaccine product
dose = "mcv1",
name="mcv1"
)
my_intervention2 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.80,           # 20% coverage
product=mcv2,   # Use the MyVaccine product
dose = "mcv2",
name="mcv2"
)
intv = [my_intervention1, my_intervention2]
pars = dict(
n_agents = 25_000,     # Number of agents to simulate
birth_rate = 27.58,    # parameters for monthly: birth rate 2022 is 27.58
death_rate = 7.8,        # parameters for monthly: death rate 2022 is 7.8
networks = ss.RandomNet(pars={'n_contacts': 10})
)
ppl = ss.People(
n_agents = 25_000,     # Number of agents to simulate
age_data = pop_age
)
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
intv = {'intervention1': my_intervention1, 'intervention2': my_intervention2}
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
intv = [my_intervention2]
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
interventions = my_intervention2,
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = my_intervention2,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
mcv1 = measles_vaccine(efficacy=0.80, name="mcv1")
mcv2 = measles_vaccine(efficacy=0.95, name="mcv2")
# Create the intervention
# my_intervention1 = measles_routine_vx(
#     start_year=2020,    # Begin vaccination in 2015
#     prob=0.95,           # 20% coverage
#     product=mcv1,        # Use the MyVaccine product
#     dose = "mcv1",
#     name="mcv1"
# )
my_intervention2 = measles_routine_vx(
start_year=2020,    # Begin vaccination in 2015
prob=0.80,           # 20% coverage
product=mcv2,   # Use the MyVaccine product
dose = "mcv2",
name="mcv2"
)
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = my_intervention2,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
my_vax1 = measles_vaccine(name='vax1', pars=dict(efficacy=0.85))
my_vax2 = measles_vaccine(name='vax2', pars=dict(efficacy=0.99))
intv1 = routine_measles_vx(
name='routine1',
start_year=2020,
product=my_vax1,
prob=.95
)
intv2 = routine_measles_vx(
name='routine2',
start_year=2020,
eligibility=eligibility_mcv2,
product=my_vax2,
prob=.95
)
intv2 = routine_measles_vx(
name='routine2',
start_year=2020,
product=my_vax2,
prob=.95
)
intv = [intv1, intv2]
pars = dict(
n_agents = 25_000,     # Number of agents to simulate
birth_rate = 27.58,    # parameters for monthly: birth rate 2022 is 27.58
death_rate = 7.8,        # parameters for monthly: death rate 2022 is 7.8
networks = ss.RandomNet(pars={'n_contacts': 10})
)
ppl = ss.People(
n_agents = 25_000,     # Number of agents to simulate
age_data = pop_age
)
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = my_intervention2,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
import starsim as ss
class measlesIntervention(ss.Plugin):
"""
Base class for interventions.
The key method of the measlesIntervention is ``apply()``, which is called with the sim
on each timestep.
"""
def __init__(self, eligibility=None, dose = None, *args, **kwargs):
super().__init__(*args, **kwargs)
self.eligibility = eligibility
self.dose = dose
return
def _parse_product(self, product):
"""
Parse the product input
"""
if isinstance(product, ss.Product):  # No need to do anything
self.product = product
elif isinstance(product, str):
self.product = self._parse_product_str(product)
else:
errormsg = f'Cannot understand {product} - please provide it as a Product.'
raise ValueError(errormsg)
return
def _parse_product_str(self, product):
raise NotImplementedError
def check_eligibility(self, sim):
"""
Return an array of indices of agents eligible for screening at time t
"""
if self.eligibility is not None:
is_eligible = self.eligibility(sim)
if is_eligible is not None and len(is_eligible): # Only worry if non-None/nonzero length
if isinstance(is_eligible, ss.BoolArr):
is_eligible = is_eligible.uids
if not isinstance(is_eligible, ss.uids):
errormsg = f'Eligibility function must return BoolArr or UIDs, not {type(is_eligible)} {is_eligible}'
raise TypeError(errormsg)
else:
is_eligible = sim.people.auids # Everyone
return is_eligible
class measlesIBaseVaccination(measlesIntervention):
"""
Base vaccination class for determining who will receive a vaccine.
"""
def __init__(self, product=None, prob=None, label=None, **kwargs):
super().__init__(**kwargs)
self.prob = sc.promotetoarray(prob)
self.label = label
self._parse_product(product)
self.vaccinated = ss.BoolArr('vaccinated')
self.n_doses = ss.FloatArr('doses', default=0)
self.ti_vaccinated = ss.FloatArr('ti_vaccinated')
self.age_at_vaccination_mcv1 = ss.FloatArr('age_at_vaccination_mcv1')  # New array to store age at MCV1
self.age_at_vaccination_mcv2 = ss.FloatArr('age_at_vaccination_mcv2')  # New array to store age at MCV2
self.coverage_dist = ss.bernoulli(p=0)  # Placeholder
return
def apply(self, sim, dose="mcv1"):
"""
Deliver the vaccination based on the dose type ('mcv1' or 'mcv2').
"""
accept_uids = np.array([])
if sim.ti in self.timepoints:
ti = sc.findinds(self.timepoints, sim.ti)[0]
prob = self.prob[ti]  # Get the proportion of people who will be vaccinated this timestep
is_eligible = self.check_eligibility(sim)  # Check eligibility
self.coverage_dist.set(p=prob)
accept_uids = self.coverage_dist.filter(is_eligible)
if dose == "mcv1":
# First dose (MCV1): Eligible age between 9 and 12 months, no previous dose
accept_uids = sim.people.auids[(sim.people.age >= 9/12) & (sim.people.age <= 12/12) & (self.n_doses == 0)]
if len(accept_uids):
self.product.administer(sim.people, accept_uids)
# Update people's state and vaccination date for MCV1
self.vaccinated[accept_uids] = True
self.ti_vaccinated[accept_uids] = sim.ti
self.n_doses[accept_uids] += 1
# Store the age at the time of MCV1 vaccination
self.age_at_vaccination_mcv1[accept_uids] = sim.people.age[accept_uids]
elif dose == "mcv2":
# Second dose (MCV2): Eligible age between 18 and 24 months, only 1 previous dose
accept_uids = sim.people.auids[(sim.people.age >= 18/12) & (sim.people.age <= 24/12) & (self.n_doses == 1)]
if len(accept_uids):
self.product.administer(sim.people, accept_uids)
# Update people's state and vaccination date for MCV2
self.vaccinated[accept_uids] = True
self.ti_vaccinated[accept_uids] = sim.ti
self.n_doses[accept_uids] += 1
# Store the age at the time of MCV2 vaccination
self.age_at_vaccination_mcv2[accept_uids] = sim.people.age[accept_uids]
return accept_uids
class measles_routine_vx(measlesIBaseVaccination, ss.RoutineDelivery):
"""
Routine vaccination - an instance of base vaccination combined with routine delivery.
See base classes for a description of input arguments.
"""
def __init__(self, product=None, prob=None, eligibility=None, dose = None,
start_year=None, end_year=None, years=None, **kwargs):
measlesIBaseVaccination.__init__(self, product=product, dose = dose, eligibility=eligibility, **kwargs)
ss.RoutineDelivery.__init__(self, prob=prob, start_year=start_year, end_year=end_year, years=years)
return
def init_pre(self, sim):
RoutineDelivery.init_pre(self, sim)  # Initialize this first, as it ensures that prob is interpolated properly
measlesIBaseVaccination.init_pre(self, sim)  # Initialize this next
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv1,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
mysim.plot()
plt.show()
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv2,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
mysim.run()
mysim.plot()
plt.show()
intv = [intv1, intv2]
# Pars
pars = dict(
n_agents = 25_000,     # Number of agents to simulate
birth_rate = 27.58,    # parameters for monthly: birth rate 2022 is 27.58
death_rate = 7.8,        # parameters for monthly: death rate 2022 is 7.8
networks = ss.RandomNet(pars={'n_contacts': 10})
)
ppl = ss.People(
n_agents = 25_000,     # Number of agents to simulate
age_data = pop_age
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
intv1 = measles_routine_vx(
name='routine1',
start_year=2020,
product=my_vax1,
prob=.95
)
intv2 = measles_routine_vx(
name='routine2',
start_year=2020,
eligibility=eligibility_mcv2,
product=my_vax2,
prob=.95
)
intv1 = measles_routine_vx(
name='routine1',
start_year=2020,
product=my_vax1,
prob=.95
)
intv2 = measles_routine_vx(
name='routine2',
start_year=2020,
product=my_vax2,
prob=.95
)
intv = [intv1, intv2]
mysim = ss.Sim(
pars = pars,
start = 2020,
people = ppl,
diseases = measles,
interventions = intv,
rand_seed = 765,
n_years = 10,
dt = 1/12
)
reticulate::repl_python()
rm(list = ls())
require(reticulate)
reticulate::repl_python()
