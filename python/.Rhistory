data.table,
lubridate,
ggalt,
patchwork,
stringr
)
# Importing data ----------------------------------------------------------
k <- fread("data/kenya_measles.csv")
co <- fread("data/county_measles.csv")
head(k)
k2 <- k |>
_[, .(
month = str_split(periodname, " ", simplify = T)[,1],
year = str_split(periodname, " ", simplify = T)[,2],
deaths = `IDSR Measles Deaths`,
cases = `IDSR Measles Total`,
mcv1 = `Proportion of under 1 year receiving vaccine against Measles and Rubella 1`,
mcv2 = `Proportion of under two years receiving  vaccine against Measles and Rubella 2`
)] |>
_[, date := ymd(paste(year, month, "01", sep = "-"))] |>
_[, !c("month", "year")] |>
setcolorder(c("date", "cases", "deaths", "mcv1", "mcv2"))
k2 |>
ggplot(aes(x = date)) +
geom_xspline(aes(y = cases)) +
theme_minimal()
reticulate::repl_python()
# SIR model with time-varying R0,eff
sir_model <- function(time, state, parameters) {
with(as.list(c(state, parameters)), {
# Calculate n(t)
n_t <- (birth_rate(time) - infant_mortality(time)) / N0 * (1 - vaccination_rate(time))
# Effective R0 calculation
R0_eff <- (n_t / n0) * R0
# Beta (transmission rate)
beta <- R0_eff * gamma
# SIR equations
dS <- -beta * S * I / N
dI <- beta * S * I / N - gamma * I
dR <- gamma * I
# Return derivatives
list(c(dS, dI, dR))
})
}
# Initial conditions
init <- c(S = 990, I = 10, R = 0) # Example initial values for S, I, and R
# Parameters
parameters <- c(
N = 1000,             # Total population
R0 = 3.5,             # Initial basic reproduction number
gamma = 1/14,         # Recovery rate
n0 = 0.02,            # Reference n0 (susceptible recruitment rate)
N0 = 1000             # Population size at anchor time
)
# Time sequence
times <- seq(0, 365, by = 1)
# Define birth, mortality, and vaccination rate functions
birth_rate <- function(t) { 10 } # Constant birth rate as an example
infant_mortality <- function(t) { 1 } # Constant infant mortality rate as an example
vaccination_rate <- function(t) { 0.5 } # Constant vaccination rate as an example
# Solve the model
output <- ode(y = init, times = times, func = sir_model, parms = parameters)
# Required library
library(deSolve)
# Solve the model
output <- ode(y = init, times = times, func = sir_model, parms = parameters)
# Convert output to a data frame for easier plotting
output <- as.data.frame(output)
output
# Plot the results
plot(output$time, output$S, type = "l", col = "blue", ylim = c(0, 1000), ylab = "Counts", xlab = "Time (days)")
lines(output$time, output$I, col = "red")
lines(output$time, output$R, col = "green")
legend("right", legend = c("Susceptible", "Infectious", "Recovered"), col = c("blue", "red", "green"), lty = 1)
reticulate::repl_python()
# handle beta here: at start of infection prior to transmission
beta_mean = 1  # Mean transmission rate
beta_amplitude = -1  # Amplitude of seasonal forcing
beta_phase = 10  # Phase shift of seasonal forcing (in months)
beta_period = 60  # Period of seasonal forcing (in months)
beta_rate = beta_mean * (1 + beta_amplitude * np.cos(2 * np.pi * (ti - beta_phase) / beta_period))
beta_prob = 1 - np.exp(-beta_rate)
reticulate::repl_python()
# handle beta here: at start of infection prior to transmission
beta_mean = 1  # Mean transmission rate
beta_amplitude = -1  # Amplitude of seasonal forcing
beta_phase = 10  # Phase shift of seasonal forcing (in months)
beta_period = 60  # Period of seasonal forcing (in months)
beta_rate = beta_mean * (1 + beta_amplitude * np.cos(2 * np.pi * (ti - beta_phase) / beta_period))
reticulate::repl_python()
k2 |>
ggplot(aes(x = date)) +
geom_xspline(aes(y = cases)) +
theme_minimal()
k2 |>
ggplot(aes(x = date)) +
geom_smooth(method = "gam", se = F)
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "gam", se = F)
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "gam", se = F)
k2 |>
ggplot(aes(x = date)) +
geom_xspline(aes(y = cases)) +
theme_minimal()
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "loess", se = F)
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "loess", se = F, span = .2)
plotly::ggplotly(
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "loess", se = F, span = .2) +
theme_minimal()
)
plotly::ggplotly(
k2 |>
ggplot(aes(x = date)) +
geom_smooth(aes(y = cases), method = "loess", se = F, span = .1) +
theme_minimal()
)
reticulate::repl_python()
69+71+3+27+16/5
(69+71+3+27+16)/5
(123 + 102+10+30+10)/5
(1+2+4+3+5)/5
(41+26+13+9+17)/5
(5+2+4+4+5)/5
reticulate::repl_python()
pacman::p_load(
dplyr,
ggplot2,
data.table,
lubridate,
ggalt,
patchwork,
stringr,
rKenyaCensus
)
rKenyaCensus::V3_T2.2
View(rKenyaCensus::V3_T2.2)
pop_age <- View(rKenyaCensus::V3_T2.2) %>%
setNames(c(colnames(.)))
pop_age <- View(rKenyaCensus::V3_T2.2) %>%
setNames(c(colnames(.)))
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(colnames(.)))
pop_age
unique(pop_age$Age)
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.))))
_[!age %in% c("Total", "NotStated"),]
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
_[!age %in% c("Total", "NotStated"),]
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.))))
pop_age
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated"),]
unique(pop_age$age)
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated") & !str_detect(age, "\\-"),]
unique(pop_age$age)
View(pop_age)
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated") & !str_detect(age, "\\-"),] |>
_[, .(age, total)]
View(pop_age)
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated") & !str_detect(age, "\\-"),] |>
_[, .(age = str_replace_all(age, "\\+", ""), total)]
pop_age
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated") & !str_detect(age, "\\-"),] |>
_[, .(age = str_replace_all(age, "\\+", "") |> as.numeric(), total)]
pop_age
fwrite(pop_age, "data/pop_age.csv", row.names = F)
pop_age
pop_age |>
ggplot(aes(x = total)) +
geom_histogram() +
theme_minimal()
pop_age |>
ggplot(aes(x = age)) +
geom_histogram() +
theme_minimal()
pop_age |>
ggplot(aes(x = age)) +
geom_col(aes(y = total)) +
theme_minimal()
pop_age |>
ggplot(aes(x = age)) +
geom_col(aes(y = total)) +
theme_minimal() +
scale_y_continuous(labels = scales::label_comma())
reticulate::repl_python()
sum(pop_age$total)
require(reticulate)
repl_python()
pop_age <- rKenyaCensus::V3_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
data.table() |>
_[!age %in% c("Total", "NotStated") & !str_detect(age, "\\-"),] |>
_[, .(age = str_replace_all(age, "\\+", "") |> as.numeric(), value = total)]
pop_age
reticulate::repl_python()
year_pop <- readRDS("data/year_pop.rds")
year_pop
View(year_pop)
pacman::p_load(
dplyr,
ggplot2,
data.table,
lubridate,
ggalt,
patchwork,
stringr,
rKenyaCensus,
INLA,
inlabru
)
bdf
# working on one dataset
bdf <- readRDS("data/all_ages_raw.rds")
# working on one dataset
bdf <- readRDS("data/all_ages_raw.rds")
bdf2 <- bdf |>
mutate(
across(
.cols = starts_with("2"),
.fns = as.numeric
)
) |>
pivot_longer(starts_with("2")) |>
mutate(year = str_split(name, "_") |> lapply(FUN = first) |> unlist(),
gender = str_split(name, "_") |> lapply(FUN = last) |> unlist()) |>
select(county, Age, gender, year, population = value) |>
arrange(county, gender, year, Age)
require(tidyr)
# working on one dataset
bdf <- readRDS("data/all_ages_raw.rds")
bdf2 <- bdf |>
mutate(
across(
.cols = starts_with("2"),
.fns = as.numeric
)
) |>
pivot_longer(starts_with("2")) |>
mutate(year = str_split(name, "_") |> lapply(FUN = first) |> unlist(),
gender = str_split(name, "_") |> lapply(FUN = last) |> unlist()) |>
select(county, Age, gender, year, population = value) |>
arrange(county, gender, year, Age)
bdf
# working on one dataset
bdf <- readRDS("data/cleaned_population.rds")
# working on one dataset
bdf <- readRDS("data/cleaned_population.rds")
# working on one dataset
bdf <- readRDS("data/year_pop.rds")
bdf2 <- bdf |>
mutate(
across(
.cols = starts_with("2"),
.fns = as.numeric
)
) |>
pivot_longer(starts_with("2")) |>
mutate(year = str_split(name, "_") |> lapply(FUN = first) |> unlist(),
gender = str_split(name, "_") |> lapply(FUN = last) |> unlist()) |>
select(county, Age, gender, year, population = value) |>
arrange(county, gender, year, Age)
# working on one dataset
bdf <- readRDS("data/year_pop.rds")
# working on one dataset
bdf2 <- readRDS("data/year_pop.rds")
mbdf2 <- merge(
bdf2 |> mutate(month = "Jun"),
expand.grid(
county = bdf2 |> pull(county) |> unique(),
Age = bdf2 |> pull(Age) |> unique(),
gender = bdf2 |> pull(gender) |> unique(),
year = bdf2 |> pull(year) |> unique(),
month = month.abb
),
by = c('county', 'Age', 'gender', 'year', 'month'),
all = T
)
mbdf2
bdf2 |> pull(year) |> unique()
mbdf2 <- merge(
bdf2 |> mutate(month = "Jun"),
expand.grid(
county = bdf2 |> pull(county) |> unique(),
Age = bdf2 |> pull(Age) |> unique(),
gender = bdf2 |> pull(gender) |> unique(),
year = c(bdf2 |> pull(year) |> unique(), 2026:2030),
month = month.abb
),
by = c('county', 'Age', 'gender', 'year', 'month'),
all = T
)
View(mbdf2)
bdf2 <- readRDS("data/year_pop.rds")
mbdf2 <- merge(
bdf2 |> mutate(month = "Jun"),
expand.grid(
county = bdf2 |> pull(county) |> unique(),
Age = bdf2 |> pull(Age) |> unique(),
gender = bdf2 |> pull(gender) |> unique(),
year = c(bdf2 |> pull(year) |> unique(), 2026:2030),
month = month.abb
),
by = c('county', 'Age', 'gender', 'year', 'month'),
all = T
)
pacman::p_load(
dplyr,
ggplot2,
data.table,
lubridate,
ggalt,
patchwork,
stringr,
rKenyaCensus,
INLA,
inlabru,
tidyr
)
mbdf2 <- merge(
bdf2 |> mutate(month = "Jun"),
expand.grid(
county = bdf2 |> pull(county) |> unique(),
Age = bdf2 |> pull(Age) |> unique(),
gender = bdf2 |> pull(gender) |> unique(),
year = c(bdf2 |> pull(year) |> unique(), 2026:2030),
month = month.abb
),
by = c('county', 'Age', 'gender', 'year', 'month'),
all = T
)
mbdf3 <- mbdf2 |>
mutate(date = paste0(year, '-', month) |> ym()) |>
group_by(county, Age, gender) |>
arrange(date) |>
mutate(time = row_number()) |>
ungroup()
mbdf4 <- mbdf3 |>
filter(year > 2019) |>
mutate(Age = as.factor(Age),
gender = as.factor(gender),
county = as.factor(county),
countynum = as.integer(county),
gtime = time,
gmat = paste0(county, "-", Age, "-", gender) |> factor(),
gmatnum = as.integer(gmat),
logpop = log(population))
# plotting
mbdf4 |> mutate(year = factor(year)) |>
# na.omit() |>
filter(county == "Baringo" & gender == "Male") |>
ggplot(aes(x = date, y = population)) +
geom_point() +
facet_wrap(~Age, scales = "free")
i2 <- inla(
logpop ~
f(gtime, model = "linear") + # global
f(gmat, model = "iid") + # unstructured effects
f(gmatnum, time, model = "iid"), # group specific slopes
family = "gaussian",
data = mbdf4,
control.predictor = list(link = 1)
# verbose = T
)
beepr::beep(2)
mbdf5 <- mbdf4 |>
mutate(projections = i2$summary.fitted.values$mean |> exp()) |>
select(county, Age, gender, year, month, date, population, projections)
mbdf5 |>
filter(county == "Kajiado" & gender == "Male") |>
ggplot(aes(x = date, y = population)) +
geom_point() +
geom_line(aes(x = date, y = projections)) +
facet_wrap(~Age, scales = "free")
mbdf5
View(mbdf5)
ky <- mbdf5 |>
summarise(n_alive = sum(projections), .by = c(year))
ky
mbdf5
ky <- mbdf5 %>%
filter(month(date) == 12)
ky
ky <- mbdf5 %>%
filter(month(date) == 12) |>
summarise(n_alive = sum(projections), .by = c(year))
ky
ky <- mbdf5 %>%
filter(month(date) == 12)
ky
View(ky)
View(rKenyaCensus::V1_T2.2)
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total")
ky
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year))
ky
mbdf4 <- mbdf3 |>
filter(year >= 2019) |>
mutate(Age = as.factor(Age),
gender = as.factor(gender),
county = as.factor(county),
countynum = as.integer(county),
gtime = time,
gmat = paste0(county, "-", Age, "-", gender) |> factor(),
gmatnum = as.integer(gmat),
logpop = log(population))
ky
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year)) |>
rbind(data.table(year = "2019", n_alive = 47563609))
ky
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year)) |>
rbind(data.table(year = "2019", n_alive = 47563609)) |>
mutate(year = as.numeric(year)) |>
arrange(year)
ky
fwrite(ky, "data/ky.csv")
cy <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year, county))
cy
pop_age
# County population
c_data <- rKenyaCensus::V1_T2.2
View(c_data)
# County population
c_data <- rKenyaCensus::V1_T2.2%>%
setNames(c(str_to_lower(colnames(.))))
c_data
# County population
c_data <- rKenyaCensus::V1_T2.2%>%
setNames(c(str_to_lower(colnames(.)))) |>
filter(county != "Total")
c_data
# County population
c_data <- rKenyaCensus::V1_T2.2%>%
setNames(c(str_to_lower(colnames(.)))) |>
filter(county != "Total") |>
dplyr::select(county, total)
c_data
# County population
c_data <- rKenyaCensus::V1_T2.2 %>%
setNames(c(str_to_lower(colnames(.)))) |>
filter(county != "Total") |>
dplyr::select(county, n_alive = total)
fwrite(pop_age, "data/pop_age.csv", row.names = F)
mbdf2 <- merge(
bdf2 |> mutate(month = "Jun"),
expand.grid(
county = bdf2 |> pull(county) |> unique(),
Age = bdf2 |> pull(Age) |> unique(),
gender = bdf2 |> pull(gender) |> unique(),
year = c(bdf2 |> pull(year) |> unique(), 2026:2030),
month = month.abb
),
by = c('county', 'Age', 'gender', 'year', 'month'),
all = T
)
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year)) |>
arrange(year)
ky
fwrite(ky, "data/ky.csv")
cy <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year, county))
cy
ky <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year)) |>
mutate(year = as.numeric(year))
ky
cy <- mbdf5 %>%
filter(month(date) == 12 & gender == "Total") |>
summarise(n_alive = sum(projections), .by = c(year, county)) |>
mutate(year = as.numeric(year)) |>
arrange(year)
cy
fwrite(cy, "data/cy.csv")
reticulate::repl_python()
